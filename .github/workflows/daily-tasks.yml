name: Daily Data Collection (07:37 & 19:37)

on:
  schedule:
    # UTC Êó∂Èó¥ 23:37 = Âåó‰∫¨Êó∂Èó¥ 07:37
    - cron: '37 23 * * *'
    # UTC Êó∂Èó¥ 11:37 = Âåó‰∫¨Êó∂Èó¥ 19:37
    - cron: '37 11 * * *'
  workflow_dispatch:

permissions:
  contents: write
  actions: read

# Èò≤Ê≠¢Âπ∂ÂèëÊâßË°å
concurrency:
  group: daily-data-collection-${{ github.ref }}
  cancel-in-progress: true

jobs:
  daily-data-collection:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        ref: sync-current-files  # Explicitly checkout the latest sync-current-files branch
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Cache data files
      uses: actions/cache@v4
      with:
        path: |
          data/cookies.json
          data/backup_cookies
        key: bilibili-data-${{ runner.os }}-${{ hashFiles('data/cookies.json') }}-v1
        restore-keys: |
          bilibili-data-${{ runner.os }}-v1
          bilibili-data-${{ runner.os }}-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Install Playwright browsers
      run: |
        playwright install chromium
        
    - name: Configure git for data conflicts
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        # Configure git to handle database file conflicts
        git config merge.ours.driver true
        echo "data/database/bilibili_tracking.db merge=ours" >> .gitattributes
        git add .gitattributes || true
        
        # Ensure we're on the correct branch and up to date
        echo "üîÑ Ensuring latest codebase..."
        git fetch origin sync-current-files
        git checkout sync-current-files
        git pull origin sync-current-files --no-edit || echo "No remote changes to pull"
        
    - name: Run daily data collection with notification
      env:
        UP_ID: ${{ secrets.UP_ID }}
        FEISHU_WEBHOOK_URL: ${{ secrets.FEISHU_WEBHOOK_URL }}
        PYTHONPATH: ${{ github.workspace }}
        GITHUB_RUN_NUMBER: ${{ github.run_number }}
        GITHUB_REF_NAME: ${{ github.ref_name }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        # CoreÁªÑ‰ª∂ÈúÄË¶ÅÁöÑCookieÁéØÂ¢ÉÂèòÈáè
        BILIBILI_COOKIES: ${{ secrets.BILIBILI_COOKIES }}
        BILIBILI_COOKIES_1: ${{ secrets.BILIBILI_COOKIES_1 }}
        BILIBILI_COOKIES_2: ${{ secrets.BILIBILI_COOKIES_2 }}
        BILIBILI_COOKIES_3: ${{ secrets.BILIBILI_COOKIES_3 }}
        BILIBILI_COOKIES_4: ${{ secrets.BILIBILI_COOKIES_4 }}
        BILIBILI_COOKIES_5: ${{ secrets.BILIBILI_COOKIES_5 }}
        BILIBILI_COOKIES_6: ${{ secrets.BILIBILI_COOKIES_6 }}
        BILIBILI_COOKIES_7: ${{ secrets.BILIBILI_COOKIES_7 }}
        BILIBILI_COOKIES_8: ${{ secrets.BILIBILI_COOKIES_8 }}
        BILIBILI_COOKIES_9: ${{ secrets.BILIBILI_COOKIES_9 }}
        BILIBILI_COOKIES_10: ${{ secrets.BILIBILI_COOKIES_10 }}
      run: |
        echo "Starting daily data collection"
        
        # Determine task type based on trigger method
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          # Manual trigger - use Manual type
          TASK_TYPE="Manual"
          TASK_EMOJI="üîß"
          echo "Manual execution detected"
        else
          # Scheduled trigger - determine by UTC time
          CURRENT_HOUR=$(date -u +%H)
          CURRENT_MINUTE=$(date -u +%M)
          echo "Current UTC time: ${CURRENT_HOUR}:${CURRENT_MINUTE}"
          
          if [ "$CURRENT_HOUR" = "00" ]; then
            TASK_TYPE="Morning"
            TASK_EMOJI="üåÖ"
            echo "Morning task detected (UTC 00:07 = Beijing 08:07)"
          elif [ "$CURRENT_HOUR" = "12" ]; then
            TASK_TYPE="Evening"
            TASK_EMOJI="üåô" 
            echo "Evening task detected (UTC 12:07 = Beijing 20:07)"
          else
            # Fallback for other times - more detailed analysis
            if [ "$CURRENT_HOUR" -ge "00" ] && [ "$CURRENT_HOUR" -le "06" ]; then
              TASK_TYPE="Morning"
              TASK_EMOJI="üåÖ"
              echo "Morning period detected (UTC ${CURRENT_HOUR}:${CURRENT_MINUTE} = Beijing early hours)"
            elif [ "$CURRENT_HOUR" -ge "10" ] && [ "$CURRENT_HOUR" -le "16" ]; then
              TASK_TYPE="Evening"
              TASK_EMOJI="üåô"
              echo "Evening period detected (UTC ${CURRENT_HOUR}:${CURRENT_MINUTE} = Beijing evening)"
            else
              TASK_TYPE="Scheduled"
              TASK_EMOJI="‚è∞"
              echo "Other scheduled time detected (UTC ${CURRENT_HOUR}:${CURRENT_MINUTE})"
            fi
          fi
        fi
        
        echo "Task type: $TASK_TYPE ($TASK_EMOJI)"
        
        # Run daily task and capture all output
        echo "Running daily task..."
        TASK_OUTPUT_FILE="task_output_$(date +%s).log"
        
        if python run_daily_task.py > "$TASK_OUTPUT_FILE" 2>&1; then
          TASK_EXIT_CODE=0
          echo "‚úÖ Daily task completed successfully"
          
          # Send success notification with extracted data
          echo "Sending success notification..."
          python .github/scripts/feishu_notifier.py "$TASK_TYPE Daily Data Collection" "success" < "$TASK_OUTPUT_FILE" || echo "‚ö†Ô∏è Notification failed but task succeeded"
          
        else
          TASK_EXIT_CODE=1
          echo "‚ùå Daily task failed"
          
          # Send failure notification with extracted data
          echo "Sending failure notification..."
          python .github/scripts/feishu_notifier.py "$TASK_TYPE Daily Data Collection" "failure" < "$TASK_OUTPUT_FILE" || echo "‚ö†Ô∏è Notification failed and task failed"
          
          # Display output only for debugging failures
          echo "=== Task Output (Error) ==="
          cat "$TASK_OUTPUT_FILE"
          echo "=========================="
          
          exit 1
        fi
        
        # Cleanup
        rm -f "$TASK_OUTPUT_FILE"
        
    - name: Commit and push data
      run: |
        # Determine task type for commit message (same logic as above)
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          TASK_EMOJI="üîß"
          TASK_TYPE="Manual"
        else
          CURRENT_HOUR=$(date -u +%H)
          if [ "$CURRENT_HOUR" = "00" ]; then
            TASK_EMOJI="üåÖ"
            TASK_TYPE="Morning"
          elif [ "$CURRENT_HOUR" = "12" ]; then
            TASK_EMOJI="üåô"
            TASK_TYPE="Evening"
          else
            # Fallback for other times - consistent with above logic
            if [ "$CURRENT_HOUR" -ge "00" ] && [ "$CURRENT_HOUR" -le "06" ]; then
              TASK_EMOJI="üåÖ"
              TASK_TYPE="Morning"
            elif [ "$CURRENT_HOUR" -ge "10" ] && [ "$CURRENT_HOUR" -le "16" ]; then
              TASK_EMOJI="üåô"
              TASK_TYPE="Evening"
            else
              TASK_EMOJI="‚è∞"
              TASK_TYPE="Scheduled"
            fi
          fi
        fi
        
        # Check if data directory exists and has files
        if [ -d "data/" ] && [ "$(find data/ -type f | wc -l)" -gt 0 ]; then
          echo "üìä Found data files to commit"
          
          # Check if we have any changes to stash
          if ! git diff --quiet || ! git diff --cached --quiet || [ -n "$(git ls-files --others --exclude-standard)" ]; then
            echo "üíæ Stashing local changes before sync..."
            git add data/ || true  # Add data files to index first
            git stash push -u -m "Temporary stash before pull - $(date)" || echo "Nothing to stash"
          fi
          
          # Fetch and pull the latest changes
          echo "üîÑ Syncing with remote repository..."
          git fetch origin sync-current-files
          git pull origin sync-current-files --no-edit || echo "No remote changes to pull"
          
          # Restore our stashed changes if any
          if git stash list | grep -q "Temporary stash before pull"; then
            echo "üìÇ Restoring local changes..."
            git stash pop || {
              echo "‚ö†Ô∏è Merge conflict detected, resolving automatically..."
              # For database files, prefer the local version (newly generated)
              git checkout --ours data/database/bilibili_tracking.db 2>/dev/null || true
              # Add all data files
              git add data/ || true
              # Drop the problematic stash
              git stash drop || true
              echo "‚úÖ Conflicts resolved"
            }
          fi
          
          git add data/
          if ! git diff --staged --quiet; then
            git commit -m "${TASK_EMOJI} ${TASK_TYPE} data collection - $(date '+%Y-%m-%d %H:%M:%S')"
            
            # Try to push, with retry mechanism for conflicts
            MAX_RETRIES=3
            RETRY_COUNT=0
            
            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              if git push origin sync-current-files; then
                echo "‚úÖ Data committed and pushed successfully"
                break
              else
                RETRY_COUNT=$((RETRY_COUNT + 1))
                echo "‚ö†Ô∏è Push failed (attempt $RETRY_COUNT/$MAX_RETRIES), trying to resolve..."
                
                if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                  # Fetch and rebase for the retry
                  git fetch origin sync-current-files
                  git rebase origin/sync-current-files || {
                    echo "üîß Rebase conflict, resolving automatically..."
                    git rebase --abort
                    git pull origin sync-current-files --no-edit --strategy-option=ours
                  }
                else
                  echo "‚ùå Failed to push after $MAX_RETRIES attempts"
                  exit 1
                fi
              fi
            done
          else
            echo "‚ÑπÔ∏è No changes to commit in data directory"
          fi
        else
          echo "‚ö†Ô∏è Data directory is empty or doesn't exist - no data to commit"
        fi